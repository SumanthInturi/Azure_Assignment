{
	"name": "dataflow6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "sink4",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage5",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "externalCall1"
				},
				{
					"name": "unpivot1"
				},
				{
					"name": "window1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "externalCall2",
					"linkedService": {
						"referenceName": "RestService1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PO as string,",
				"          Vender as string,",
				"          Apple as string,",
				"          Mangoo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ID as short,",
				"          Date as date 'dd-MM-yyyy',",
				"          Name as string,",
				"          Address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          ID as string,",
				"          Date as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Address as string,",
				"          phonenumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          Firstname as string,",
				"          ID as short,",
				"          Lastname as string,",
				"          Projects as string[],",
				"          contact as (landline as string, phone_number as long)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source5",
				"source3 call(mapColumn(",
				"          RelativeURL,",
				"          RelativeURL,",
				"          RelativeURL,",
				"          RelativeURL,",
				"          RelativeURL,",
				"          RelativeURL,",
				"          ID,",
				"          {} = {undefined},",
				"          ID,",
				"          FullName,",
				"          FullName,",
				"          ReposRelativeURL",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false,",
				"     output(",
				"          headers as [string,string],",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true) ~> externalCall1",
				"source1 unpivot(output(",
				"          Fruits as string,",
				"          Amount as string",
				"     ),",
				"     ungroupBy(PO,",
				"          Vender),",
				"     lateral: true,",
				"     ignoreNullPivots: false) ~> unpivot1",
				"source2 window(over(ID),",
				"     asc(Date, true),",
				"     Rank_Column = denseRank()) ~> window1",
				"source4 aggregate(groupBy(Date),",
				"     Total_count = count(ID)) ~> aggregate1",
				"derivedColumn1 call(mapColumn(",
				"          Firstname,",
				"          {} = {undefined},",
				"          Lastname,",
				"          Projects,",
				"          contact,",
				"          Fullname,",
				"          FullName,",
				"          ID,",
				"          FullName,",
				"          ReposRelativeURL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     output(",
				"          body as (login as string, id as string, node_id as string, avatar_url as string, gravatar_id as string, url as string, html_url as string, followers_url as string, following_url as string, gists_url as string, starred_url as string, subscriptions_url as string, organizations_url as string, repos_url as string, events_url as string, received_events_url as string, type as string, site_admin as string, name as string, company as string, blog as string, location as string, email as string, hireable as string, bio as string, twitter_username as string, public_repos as string, public_gists as string, followers as string, following as string, created_at as string, updated_at as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     format: 'rest',",
				"     store: 'restservice',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     httpMethod: 'GET',",
				"     rowRelativeUrl: 'RelativeURL',",
				"     bodyColumnName: 'body',",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> externalCall2",
				"source5 derive(Fullname = Firstname+Lastname,",
				"          RelativeURL = \"https://api.github.com/users/\"+Firstname+Lastname) ~> derivedColumn1",
				"unpivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"externalCall1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PO as string,",
				"          Vender as string,",
				"          Apple as string,",
				"          Mangoo as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['OutputForAggre.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4"
			]
		}
	}
}